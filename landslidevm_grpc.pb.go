// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: landslidevm.proto

package landslidevm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LandslideVMClient is the client API for LandslideVM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LandslideVMClient interface {
	// Initialize this VM.
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	// SetState communicates to VM its next state it starts
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	// Shutdown is called when the node is shutting down.
	Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates the HTTP handlers for custom chain network calls.
	CreateHandlers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateHandlersResponse, error)
	Connected(ctx context.Context, in *ConnectedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Disconnected(ctx context.Context, in *DisconnectedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Attempt to create a new block from data contained in the VM.
	BuildBlock(ctx context.Context, in *BuildBlockRequest, opts ...grpc.CallOption) (*BuildBlockResponse, error)
	// Attempt to create a block from a stream of bytes.
	ParseBlock(ctx context.Context, in *ParseBlockRequest, opts ...grpc.CallOption) (*ParseBlockResponse, error)
	// Attempt to load a block.
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	// Notify the VM of the currently preferred block.
	SetPreference(ctx context.Context, in *SetPreferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Attempt to verify the health of the VM.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	// Version returns the version of the VM.
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Notify this engine of a request for data from [nodeID].
	AppRequest(ctx context.Context, in *AppRequestMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Notify this engine that an AppRequest message it sent to [nodeID] with
	// request ID [requestID] failed.
	AppRequestFailed(ctx context.Context, in *AppRequestFailedMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Notify this engine of a response to the AppRequest message it sent to
	// [nodeID] with request ID [requestID].
	AppResponse(ctx context.Context, in *AppResponseMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Notify this engine of a gossip message from [nodeID].
	AppGossip(ctx context.Context, in *AppGossipMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Attempts to gather metrics from a VM.
	Gather(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GatherResponse, error)
	CrossChainAppRequest(ctx context.Context, in *CrossChainAppRequestMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CrossChainAppRequestFailed(ctx context.Context, in *CrossChainAppRequestFailedMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CrossChainAppResponse(ctx context.Context, in *CrossChainAppResponseMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// BatchedChainVM
	GetAncestors(ctx context.Context, in *GetAncestorsRequest, opts ...grpc.CallOption) (*GetAncestorsResponse, error)
	BatchedParseBlock(ctx context.Context, in *BatchedParseBlockRequest, opts ...grpc.CallOption) (*BatchedParseBlockResponse, error)
	// HeightIndexedChainVM
	VerifyHeightIndex(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VerifyHeightIndexResponse, error)
	GetBlockIDAtHeight(ctx context.Context, in *GetBlockIDAtHeightRequest, opts ...grpc.CallOption) (*GetBlockIDAtHeightResponse, error)
	// StateSyncableVM
	//
	// StateSyncEnabled indicates whether the state sync is enabled for this VM.
	StateSyncEnabled(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StateSyncEnabledResponse, error)
	// GetOngoingSyncStateSummary returns an in-progress state summary if it exists.
	GetOngoingSyncStateSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOngoingSyncStateSummaryResponse, error)
	// GetLastStateSummary returns the latest state summary.
	GetLastStateSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLastStateSummaryResponse, error)
	// ParseStateSummary parses a state summary out of [summaryBytes].
	ParseStateSummary(ctx context.Context, in *ParseStateSummaryRequest, opts ...grpc.CallOption) (*ParseStateSummaryResponse, error)
	// GetStateSummary retrieves the state summary that was generated at height
	// [summaryHeight].
	GetStateSummary(ctx context.Context, in *GetStateSummaryRequest, opts ...grpc.CallOption) (*GetStateSummaryResponse, error)
	// Block
	BlockVerify(ctx context.Context, in *BlockVerifyRequest, opts ...grpc.CallOption) (*BlockVerifyResponse, error)
	BlockAccept(ctx context.Context, in *BlockAcceptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlockReject(ctx context.Context, in *BlockRejectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// StateSummary
	StateSummaryAccept(ctx context.Context, in *StateSummaryAcceptRequest, opts ...grpc.CallOption) (*StateSummaryAcceptResponse, error)
}

type landslideVMClient struct {
	cc grpc.ClientConnInterface
}

func NewLandslideVMClient(cc grpc.ClientConnInterface) LandslideVMClient {
	return &landslideVMClient{cc}
}

func (c *landslideVMClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) CreateHandlers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateHandlersResponse, error) {
	out := new(CreateHandlersResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/CreateHandlers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) Connected(ctx context.Context, in *ConnectedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/Connected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) Disconnected(ctx context.Context, in *DisconnectedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/Disconnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) BuildBlock(ctx context.Context, in *BuildBlockRequest, opts ...grpc.CallOption) (*BuildBlockResponse, error) {
	out := new(BuildBlockResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/BuildBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) ParseBlock(ctx context.Context, in *ParseBlockRequest, opts ...grpc.CallOption) (*ParseBlockResponse, error) {
	out := new(ParseBlockResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/ParseBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) SetPreference(ctx context.Context, in *SetPreferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/SetPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) AppRequest(ctx context.Context, in *AppRequestMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/AppRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) AppRequestFailed(ctx context.Context, in *AppRequestFailedMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/AppRequestFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) AppResponse(ctx context.Context, in *AppResponseMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/AppResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) AppGossip(ctx context.Context, in *AppGossipMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/AppGossip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) Gather(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GatherResponse, error) {
	out := new(GatherResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/Gather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) CrossChainAppRequest(ctx context.Context, in *CrossChainAppRequestMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/CrossChainAppRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) CrossChainAppRequestFailed(ctx context.Context, in *CrossChainAppRequestFailedMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/CrossChainAppRequestFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) CrossChainAppResponse(ctx context.Context, in *CrossChainAppResponseMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/CrossChainAppResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) GetAncestors(ctx context.Context, in *GetAncestorsRequest, opts ...grpc.CallOption) (*GetAncestorsResponse, error) {
	out := new(GetAncestorsResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/GetAncestors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) BatchedParseBlock(ctx context.Context, in *BatchedParseBlockRequest, opts ...grpc.CallOption) (*BatchedParseBlockResponse, error) {
	out := new(BatchedParseBlockResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/BatchedParseBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) VerifyHeightIndex(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VerifyHeightIndexResponse, error) {
	out := new(VerifyHeightIndexResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/VerifyHeightIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) GetBlockIDAtHeight(ctx context.Context, in *GetBlockIDAtHeightRequest, opts ...grpc.CallOption) (*GetBlockIDAtHeightResponse, error) {
	out := new(GetBlockIDAtHeightResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/GetBlockIDAtHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) StateSyncEnabled(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StateSyncEnabledResponse, error) {
	out := new(StateSyncEnabledResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/StateSyncEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) GetOngoingSyncStateSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOngoingSyncStateSummaryResponse, error) {
	out := new(GetOngoingSyncStateSummaryResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/GetOngoingSyncStateSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) GetLastStateSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLastStateSummaryResponse, error) {
	out := new(GetLastStateSummaryResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/GetLastStateSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) ParseStateSummary(ctx context.Context, in *ParseStateSummaryRequest, opts ...grpc.CallOption) (*ParseStateSummaryResponse, error) {
	out := new(ParseStateSummaryResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/ParseStateSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) GetStateSummary(ctx context.Context, in *GetStateSummaryRequest, opts ...grpc.CallOption) (*GetStateSummaryResponse, error) {
	out := new(GetStateSummaryResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/GetStateSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) BlockVerify(ctx context.Context, in *BlockVerifyRequest, opts ...grpc.CallOption) (*BlockVerifyResponse, error) {
	out := new(BlockVerifyResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/BlockVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) BlockAccept(ctx context.Context, in *BlockAcceptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/BlockAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) BlockReject(ctx context.Context, in *BlockRejectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/BlockReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landslideVMClient) StateSummaryAccept(ctx context.Context, in *StateSummaryAcceptRequest, opts ...grpc.CallOption) (*StateSummaryAcceptResponse, error) {
	out := new(StateSummaryAcceptResponse)
	err := c.cc.Invoke(ctx, "/vm.LandslideVM/StateSummaryAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LandslideVMServer is the server API for LandslideVM service.
// All implementations should embed UnimplementedLandslideVMServer
// for forward compatibility
type LandslideVMServer interface {
	// Initialize this VM.
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	// SetState communicates to VM its next state it starts
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	// Shutdown is called when the node is shutting down.
	Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Creates the HTTP handlers for custom chain network calls.
	CreateHandlers(context.Context, *emptypb.Empty) (*CreateHandlersResponse, error)
	Connected(context.Context, *ConnectedRequest) (*emptypb.Empty, error)
	Disconnected(context.Context, *DisconnectedRequest) (*emptypb.Empty, error)
	// Attempt to create a new block from data contained in the VM.
	BuildBlock(context.Context, *BuildBlockRequest) (*BuildBlockResponse, error)
	// Attempt to create a block from a stream of bytes.
	ParseBlock(context.Context, *ParseBlockRequest) (*ParseBlockResponse, error)
	// Attempt to load a block.
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	// Notify the VM of the currently preferred block.
	SetPreference(context.Context, *SetPreferenceRequest) (*emptypb.Empty, error)
	// Attempt to verify the health of the VM.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	// Version returns the version of the VM.
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	// Notify this engine of a request for data from [nodeID].
	AppRequest(context.Context, *AppRequestMsg) (*emptypb.Empty, error)
	// Notify this engine that an AppRequest message it sent to [nodeID] with
	// request ID [requestID] failed.
	AppRequestFailed(context.Context, *AppRequestFailedMsg) (*emptypb.Empty, error)
	// Notify this engine of a response to the AppRequest message it sent to
	// [nodeID] with request ID [requestID].
	AppResponse(context.Context, *AppResponseMsg) (*emptypb.Empty, error)
	// Notify this engine of a gossip message from [nodeID].
	AppGossip(context.Context, *AppGossipMsg) (*emptypb.Empty, error)
	// Attempts to gather metrics from a VM.
	Gather(context.Context, *emptypb.Empty) (*GatherResponse, error)
	CrossChainAppRequest(context.Context, *CrossChainAppRequestMsg) (*emptypb.Empty, error)
	CrossChainAppRequestFailed(context.Context, *CrossChainAppRequestFailedMsg) (*emptypb.Empty, error)
	CrossChainAppResponse(context.Context, *CrossChainAppResponseMsg) (*emptypb.Empty, error)
	// BatchedChainVM
	GetAncestors(context.Context, *GetAncestorsRequest) (*GetAncestorsResponse, error)
	BatchedParseBlock(context.Context, *BatchedParseBlockRequest) (*BatchedParseBlockResponse, error)
	// HeightIndexedChainVM
	VerifyHeightIndex(context.Context, *emptypb.Empty) (*VerifyHeightIndexResponse, error)
	GetBlockIDAtHeight(context.Context, *GetBlockIDAtHeightRequest) (*GetBlockIDAtHeightResponse, error)
	// StateSyncableVM
	//
	// StateSyncEnabled indicates whether the state sync is enabled for this VM.
	StateSyncEnabled(context.Context, *emptypb.Empty) (*StateSyncEnabledResponse, error)
	// GetOngoingSyncStateSummary returns an in-progress state summary if it exists.
	GetOngoingSyncStateSummary(context.Context, *emptypb.Empty) (*GetOngoingSyncStateSummaryResponse, error)
	// GetLastStateSummary returns the latest state summary.
	GetLastStateSummary(context.Context, *emptypb.Empty) (*GetLastStateSummaryResponse, error)
	// ParseStateSummary parses a state summary out of [summaryBytes].
	ParseStateSummary(context.Context, *ParseStateSummaryRequest) (*ParseStateSummaryResponse, error)
	// GetStateSummary retrieves the state summary that was generated at height
	// [summaryHeight].
	GetStateSummary(context.Context, *GetStateSummaryRequest) (*GetStateSummaryResponse, error)
	// Block
	BlockVerify(context.Context, *BlockVerifyRequest) (*BlockVerifyResponse, error)
	BlockAccept(context.Context, *BlockAcceptRequest) (*emptypb.Empty, error)
	BlockReject(context.Context, *BlockRejectRequest) (*emptypb.Empty, error)
	// StateSummary
	StateSummaryAccept(context.Context, *StateSummaryAcceptRequest) (*StateSummaryAcceptResponse, error)
}

// UnimplementedLandslideVMServer should be embedded to have forward compatible implementations.
type UnimplementedLandslideVMServer struct {
}

func (UnimplementedLandslideVMServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedLandslideVMServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedLandslideVMServer) Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedLandslideVMServer) CreateHandlers(context.Context, *emptypb.Empty) (*CreateHandlersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHandlers not implemented")
}
func (UnimplementedLandslideVMServer) Connected(context.Context, *ConnectedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connected not implemented")
}
func (UnimplementedLandslideVMServer) Disconnected(context.Context, *DisconnectedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnected not implemented")
}
func (UnimplementedLandslideVMServer) BuildBlock(context.Context, *BuildBlockRequest) (*BuildBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildBlock not implemented")
}
func (UnimplementedLandslideVMServer) ParseBlock(context.Context, *ParseBlockRequest) (*ParseBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseBlock not implemented")
}
func (UnimplementedLandslideVMServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedLandslideVMServer) SetPreference(context.Context, *SetPreferenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPreference not implemented")
}
func (UnimplementedLandslideVMServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedLandslideVMServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedLandslideVMServer) AppRequest(context.Context, *AppRequestMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRequest not implemented")
}
func (UnimplementedLandslideVMServer) AppRequestFailed(context.Context, *AppRequestFailedMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRequestFailed not implemented")
}
func (UnimplementedLandslideVMServer) AppResponse(context.Context, *AppResponseMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppResponse not implemented")
}
func (UnimplementedLandslideVMServer) AppGossip(context.Context, *AppGossipMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGossip not implemented")
}
func (UnimplementedLandslideVMServer) Gather(context.Context, *emptypb.Empty) (*GatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gather not implemented")
}
func (UnimplementedLandslideVMServer) CrossChainAppRequest(context.Context, *CrossChainAppRequestMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainAppRequest not implemented")
}
func (UnimplementedLandslideVMServer) CrossChainAppRequestFailed(context.Context, *CrossChainAppRequestFailedMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainAppRequestFailed not implemented")
}
func (UnimplementedLandslideVMServer) CrossChainAppResponse(context.Context, *CrossChainAppResponseMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainAppResponse not implemented")
}
func (UnimplementedLandslideVMServer) GetAncestors(context.Context, *GetAncestorsRequest) (*GetAncestorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAncestors not implemented")
}
func (UnimplementedLandslideVMServer) BatchedParseBlock(context.Context, *BatchedParseBlockRequest) (*BatchedParseBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchedParseBlock not implemented")
}
func (UnimplementedLandslideVMServer) VerifyHeightIndex(context.Context, *emptypb.Empty) (*VerifyHeightIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyHeightIndex not implemented")
}
func (UnimplementedLandslideVMServer) GetBlockIDAtHeight(context.Context, *GetBlockIDAtHeightRequest) (*GetBlockIDAtHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockIDAtHeight not implemented")
}
func (UnimplementedLandslideVMServer) StateSyncEnabled(context.Context, *emptypb.Empty) (*StateSyncEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateSyncEnabled not implemented")
}
func (UnimplementedLandslideVMServer) GetOngoingSyncStateSummary(context.Context, *emptypb.Empty) (*GetOngoingSyncStateSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOngoingSyncStateSummary not implemented")
}
func (UnimplementedLandslideVMServer) GetLastStateSummary(context.Context, *emptypb.Empty) (*GetLastStateSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastStateSummary not implemented")
}
func (UnimplementedLandslideVMServer) ParseStateSummary(context.Context, *ParseStateSummaryRequest) (*ParseStateSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseStateSummary not implemented")
}
func (UnimplementedLandslideVMServer) GetStateSummary(context.Context, *GetStateSummaryRequest) (*GetStateSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateSummary not implemented")
}
func (UnimplementedLandslideVMServer) BlockVerify(context.Context, *BlockVerifyRequest) (*BlockVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockVerify not implemented")
}
func (UnimplementedLandslideVMServer) BlockAccept(context.Context, *BlockAcceptRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockAccept not implemented")
}
func (UnimplementedLandslideVMServer) BlockReject(context.Context, *BlockRejectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockReject not implemented")
}
func (UnimplementedLandslideVMServer) StateSummaryAccept(context.Context, *StateSummaryAcceptRequest) (*StateSummaryAcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateSummaryAccept not implemented")
}

// UnsafeLandslideVMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LandslideVMServer will
// result in compilation errors.
type UnsafeLandslideVMServer interface {
	mustEmbedUnimplementedLandslideVMServer()
}

func RegisterLandslideVMServer(s grpc.ServiceRegistrar, srv LandslideVMServer) {
	s.RegisterService(&LandslideVM_ServiceDesc, srv)
}

func _LandslideVM_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).Shutdown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_CreateHandlers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).CreateHandlers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/CreateHandlers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).CreateHandlers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_Connected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).Connected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/Connected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).Connected(ctx, req.(*ConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_Disconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).Disconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/Disconnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).Disconnected(ctx, req.(*DisconnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_BuildBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).BuildBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/BuildBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).BuildBlock(ctx, req.(*BuildBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_ParseBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).ParseBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/ParseBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).ParseBlock(ctx, req.(*ParseBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_SetPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).SetPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/SetPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).SetPreference(ctx, req.(*SetPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_AppRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).AppRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/AppRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).AppRequest(ctx, req.(*AppRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_AppRequestFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequestFailedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).AppRequestFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/AppRequestFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).AppRequestFailed(ctx, req.(*AppRequestFailedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_AppResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppResponseMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).AppResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/AppResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).AppResponse(ctx, req.(*AppResponseMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_AppGossip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGossipMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).AppGossip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/AppGossip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).AppGossip(ctx, req.(*AppGossipMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_Gather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).Gather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/Gather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).Gather(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_CrossChainAppRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossChainAppRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).CrossChainAppRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/CrossChainAppRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).CrossChainAppRequest(ctx, req.(*CrossChainAppRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_CrossChainAppRequestFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossChainAppRequestFailedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).CrossChainAppRequestFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/CrossChainAppRequestFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).CrossChainAppRequestFailed(ctx, req.(*CrossChainAppRequestFailedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_CrossChainAppResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossChainAppResponseMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).CrossChainAppResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/CrossChainAppResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).CrossChainAppResponse(ctx, req.(*CrossChainAppResponseMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_GetAncestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAncestorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).GetAncestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/GetAncestors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).GetAncestors(ctx, req.(*GetAncestorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_BatchedParseBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchedParseBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).BatchedParseBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/BatchedParseBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).BatchedParseBlock(ctx, req.(*BatchedParseBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_VerifyHeightIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).VerifyHeightIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/VerifyHeightIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).VerifyHeightIndex(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_GetBlockIDAtHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockIDAtHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).GetBlockIDAtHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/GetBlockIDAtHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).GetBlockIDAtHeight(ctx, req.(*GetBlockIDAtHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_StateSyncEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).StateSyncEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/StateSyncEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).StateSyncEnabled(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_GetOngoingSyncStateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).GetOngoingSyncStateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/GetOngoingSyncStateSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).GetOngoingSyncStateSummary(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_GetLastStateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).GetLastStateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/GetLastStateSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).GetLastStateSummary(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_ParseStateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseStateSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).ParseStateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/ParseStateSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).ParseStateSummary(ctx, req.(*ParseStateSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_GetStateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).GetStateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/GetStateSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).GetStateSummary(ctx, req.(*GetStateSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_BlockVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).BlockVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/BlockVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).BlockVerify(ctx, req.(*BlockVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_BlockAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).BlockAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/BlockAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).BlockAccept(ctx, req.(*BlockAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_BlockReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).BlockReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/BlockReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).BlockReject(ctx, req.(*BlockRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandslideVM_StateSummaryAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateSummaryAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandslideVMServer).StateSummaryAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm.LandslideVM/StateSummaryAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandslideVMServer).StateSummaryAccept(ctx, req.(*StateSummaryAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LandslideVM_ServiceDesc is the grpc.ServiceDesc for LandslideVM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LandslideVM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vm.LandslideVM",
	HandlerType: (*LandslideVMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _LandslideVM_Initialize_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _LandslideVM_SetState_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _LandslideVM_Shutdown_Handler,
		},
		{
			MethodName: "CreateHandlers",
			Handler:    _LandslideVM_CreateHandlers_Handler,
		},
		{
			MethodName: "Connected",
			Handler:    _LandslideVM_Connected_Handler,
		},
		{
			MethodName: "Disconnected",
			Handler:    _LandslideVM_Disconnected_Handler,
		},
		{
			MethodName: "BuildBlock",
			Handler:    _LandslideVM_BuildBlock_Handler,
		},
		{
			MethodName: "ParseBlock",
			Handler:    _LandslideVM_ParseBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _LandslideVM_GetBlock_Handler,
		},
		{
			MethodName: "SetPreference",
			Handler:    _LandslideVM_SetPreference_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _LandslideVM_Health_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _LandslideVM_Version_Handler,
		},
		{
			MethodName: "AppRequest",
			Handler:    _LandslideVM_AppRequest_Handler,
		},
		{
			MethodName: "AppRequestFailed",
			Handler:    _LandslideVM_AppRequestFailed_Handler,
		},
		{
			MethodName: "AppResponse",
			Handler:    _LandslideVM_AppResponse_Handler,
		},
		{
			MethodName: "AppGossip",
			Handler:    _LandslideVM_AppGossip_Handler,
		},
		{
			MethodName: "Gather",
			Handler:    _LandslideVM_Gather_Handler,
		},
		{
			MethodName: "CrossChainAppRequest",
			Handler:    _LandslideVM_CrossChainAppRequest_Handler,
		},
		{
			MethodName: "CrossChainAppRequestFailed",
			Handler:    _LandslideVM_CrossChainAppRequestFailed_Handler,
		},
		{
			MethodName: "CrossChainAppResponse",
			Handler:    _LandslideVM_CrossChainAppResponse_Handler,
		},
		{
			MethodName: "GetAncestors",
			Handler:    _LandslideVM_GetAncestors_Handler,
		},
		{
			MethodName: "BatchedParseBlock",
			Handler:    _LandslideVM_BatchedParseBlock_Handler,
		},
		{
			MethodName: "VerifyHeightIndex",
			Handler:    _LandslideVM_VerifyHeightIndex_Handler,
		},
		{
			MethodName: "GetBlockIDAtHeight",
			Handler:    _LandslideVM_GetBlockIDAtHeight_Handler,
		},
		{
			MethodName: "StateSyncEnabled",
			Handler:    _LandslideVM_StateSyncEnabled_Handler,
		},
		{
			MethodName: "GetOngoingSyncStateSummary",
			Handler:    _LandslideVM_GetOngoingSyncStateSummary_Handler,
		},
		{
			MethodName: "GetLastStateSummary",
			Handler:    _LandslideVM_GetLastStateSummary_Handler,
		},
		{
			MethodName: "ParseStateSummary",
			Handler:    _LandslideVM_ParseStateSummary_Handler,
		},
		{
			MethodName: "GetStateSummary",
			Handler:    _LandslideVM_GetStateSummary_Handler,
		},
		{
			MethodName: "BlockVerify",
			Handler:    _LandslideVM_BlockVerify_Handler,
		},
		{
			MethodName: "BlockAccept",
			Handler:    _LandslideVM_BlockAccept_Handler,
		},
		{
			MethodName: "BlockReject",
			Handler:    _LandslideVM_BlockReject_Handler,
		},
		{
			MethodName: "StateSummaryAccept",
			Handler:    _LandslideVM_StateSummaryAccept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "landslidevm.proto",
}
